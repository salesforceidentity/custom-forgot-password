/**
 * An apex page controller that exposes the site forgot password functionality
 */
public with sharing class CustomForgotPasswordController {
    public String username {get; set;}   
       
    public CustomForgotPasswordController() {}
    
    public PageReference forgotPassword() {
        boolean success = false;
        List<User> users = [select id, username, email from user where username = :username limit 1];
        if (users.size() == 1) {
            sendEmail(users.get(0), username);
            success = true;
        }
        PageReference pr = Page.ForgotPasswordConfirm;
        pr.setRedirect(true);
        if (success) {              
            return pr;
        } 
        return null;
    }
    
    
    public static void sendEmail(User user, String username) {
        List<Messaging.SendEmailResult> listEmailResult = null;
        List<Messaging.Singleemailmessage> listSingleEmailMessages = new List<Messaging.Singleemailmessage>();
        EmailTemplate emailTemplate = [SELECT Id, Subject, HtmlValue, Body FROM EmailTemplate WHERE DeveloperName = 'Custom_Forgot_Password_HTML']; 
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        mail.setSenderDisplayName('Community'); 
        mail.setReplyTo('noreply@salesforce.com');
        mail.setTargetObjectId(user.id);
        //mail.setTemplateId(emailTemplate.id);
        String htmlBody = emailTemplate.HtmlValue;
        String plainBody = emailTemplate.Body;
            
        String resetUrl = Site.getBaseUrl() + '/CustomSetPassword?token=' + issueJWT(username, 600);
        Map<String, String> mapBodyParams = new Map<String, String> {
               '{!resetUrl}' => resetUrl
        };            
        for (String key : mapBodyParams.keySet()) {
            htmlBody = htmlBody.replace(key, (mapBodyParams.get(key) == null) ? '' : mapBodyParams.get(key));
            plainBody = plainBody.replace(key, (mapBodyParams.get(key) == null) ? '' : mapBodyParams.get(key));
        }
        mail.setHtmlBody(htmlBody);
        mail.setSaveAsActivity(false);
        mail.setPlainTextBody(plainBody);
        listSingleEmailMessages.add(mail);
        listEmailResult = Messaging.sendEmail(listSingleEmailMessages);
    }

    
    public static String issueJWT(String subject, Integer validFor) {
        JSONGenerator claim = JSON.createGenerator(false);
        claim.writeStartObject();
        claim.writeStringField('sub', subject);
        Long rightNow = (dateTime.now().getTime()/1000)+1;
        claim.writeNumberField('exp', (rightNow + validFor));
        claim.writeEndObject();
        String jwt = base64URLencode(Blob.valueOf(claim.getAsString()));
        Blob key = EncodingUtil.base64Decode('YOUR SECRET BASE64 ENCODED KEY');
        Blob signature = Crypto.generateMac('hmacSHA1',Blob.valueof(jwt),key);
        jwt += '.' + base64URLencode(signature);  
        return jwt;
    
    }
    

    public static String base64URLencode(Blob input){ 
        String output = encodingUtil.base64Encode(input);
        output = output.replace('+', '-');
        output = output.replace('/', '_');
        while ( output.endsWith('=')){
            output = output.subString(0,output.length()-1);
        }
        return output;
    }
    
    
    
    
}